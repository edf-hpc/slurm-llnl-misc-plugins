#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2019 EDF SA
#
# Authors: CCN - HPC <dsp-cspit-ccn-hpc@edf.fr>
#
# This file is part of slurm-llnl-misc-plugins
#
# scibian-build-tools is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# scibian-build-tools is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with scibian-build-tools.  If not, see
# <http://www.gnu.org/licenses/>.

import os
import sys
import json

def get_proc_uid(pid):

    status_p = '/proc/' + pid + '/status'
    try:
        with open(status_p) as status_f:
            for line in status_f:
                if line.startswith('Uid:'):
                    return int(line.split('\t')[1])
    except IOError:  # process may have vanished
        return None

def get_proc_cmdline(pid):

    cmdline_p = '/proc/' + pid + '/cmdline'
    try:
        with open(cmdline_p) as cmdline_f:
            return cmdline_f.readline().replace('\0', ' ')
    except IOError:  # process may have vanished
        return None

def main():

    excluded_uids = []
    if len(sys.argv) >= 2:
        excluded_uids = [ int(uid_s) for uid_s in sys.argv[1].split(',') ]

    procfs_items = os.listdir('/proc')

    users_procs = {}

    for proc in procfs_items:
        if proc.isdigit():
            uid = get_proc_uid(proc)
            if uid > 1000 and uid not in excluded_uids:
                cmdline = get_proc_cmdline(proc)
                if uid not in users_procs:
                    users_procs[uid] = []
                users_procs[uid].append((proc, cmdline))

    print json.dumps(users_procs)

if __name__ == '__main__':
    main()
