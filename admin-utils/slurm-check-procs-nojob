#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2019 EDF SA
#
# Authors: CCN - HPC <dsp-cspit-ccn-hpc@edf.fr>
#
# This file is part of slurm-llnl-misc-plugins
#
# scibian-build-tools is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# scibian-build-tools is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with scibian-build-tools.  If not, see
# <http://www.gnu.org/licenses/>.

import sys
import json
import pwd
import argparse
import pyslurm
import ClusterShell
from ClusterShell.NodeSet import NodeSet
from ClusterShell.Task import task_self
from ClusterShell.Event import EventHandler
from ClusterShell.Worker.Ssh import WorkerSsh


class ProcsEventHandler(EventHandler):

    def __init__(self):
        self.procs_by_nodes = {}

    def ev_read(self, worker):

        node = worker.current_node

        try:
            users_procs = json.loads(worker.current_msg)
        except ValueError:
            # no json means error on remote node, it is catched by ev_hup()
            # eventually
            return

        for uid_s, procs in users_procs.iteritems():
            uid = int(uid_s)

            if node not in self.procs_by_nodes.keys():
                self.procs_by_nodes[node] = {}

            if uid not in self.procs_by_nodes[node].keys():
                self.procs_by_nodes[node][uid] = []

            for proc in procs:
                pid = proc[0]
                commandline = proc[1]
                self.procs_by_nodes[node][uid].append((pid, commandline))

    def ev_hup(self, worker):
        if worker.current_rc != 0:
            sys.stderr.write("%s: returned with error code %s\n" %
                             (worker.current_node, worker.current_rc))

    def ev_timeout(self, worker):
        sys.stderr.write("timeout on nodes: %s\n" %
                         (str(NodeSet.fromlist(worker.iter_keys_timeout()))))


def get_user_name(uid):

    return pwd.getpwuid(uid)[0]


def get_nodes_users(target_nodes):
    """Return a dict with nodenames in keys and list of users UID having jobs
       on this node as values."""
    nodes_users = {}

    jobs = pyslurm.job().get()
    for jobid in jobs.iterkeys():
        job_nodes = NodeSet(jobs[jobid]['nodes'])
        for node in job_nodes:
            if node in target_nodes:
                if node not in nodes_users:
                    nodes_users[node] = []
                nodes_users[node].append(jobs[jobid]['user_id'])

    return nodes_users


def get_nodes_weird_procs(target_nodes,
                          excluded_uids,
                          helper_path):
    """Propagate and run external Python script on nodes to extract remote
       processes, compare to expected UIDs per nodes provided in nodes_users
       and print result."""

    task = task_self()
    cmd = "python - %s" % (excluded_uids)
    event_handler = ProcsEventHandler()
    worker = WorkerSsh(target_nodes,
                       handler=event_handler,
                       timeout=10,
                       command=cmd)

    script_c = None
    with open(helper_path) as script_fh:
        script_c = script_fh.read()
    worker.write(script_c)
    worker.set_write_eof()
    task.schedule(worker)
    task.resume()
    return event_handler.procs_by_nodes

def print_procs(procs_by_nodes, nodes_users, output_format=None):
    if output_format is None:
        output_format = {}

    nodes_only = False
    if 'nodes_only' in output_format:
        nodes_only = output_format['nodes_only']


    matching_nodes = []
    for node, users_procs in procs_by_nodes.iteritems():

        for uid_s, procs in users_procs.iteritems():
            uid = int(uid_s)

            if node not in nodes_users or uid not in nodes_users[node]:
                if node not in matching_nodes:
                    matching_nodes.append(node)
                    if not nodes_only:
                        print "--- node %s" % node

                if not nodes_only:
                    print " weird processes from UID %d [%s]:" \
                        % (uid, get_user_name(uid))
                    for proc in procs:
                        print "  - %d %s" % (int(proc[0]), proc[1])

    if nodes_only:
        nodelist = ','.join(matching_nodes)
        if nodelist != "":
            print ClusterShell.NodeSet.fold(nodelist)

def parse_args():
    conf = {}
    parser = argparse.ArgumentParser()
    parser.add_argument('nodeset')
    parser.add_argument('excluded_uids', nargs='?', default='')
    parser.add_argument('--helper-path', nargs='?',
                        default='/usr/lib/slurm/exec/node-list-procs')
    parser.add_argument('--summary', action='store_true', default=False)
    parser.add_argument('--nodes-only', action='store_true', default=False)
    conf = parser.parse_args()
    return conf


def main():
    conf = parse_args()

    output_format = {'nodes_only': conf.nodes_only}

    excluded_uids = conf.excluded_uids
    nodeset_s = conf.nodeset
    helper_path = conf.helper_path
    nodeset = NodeSet(nodeset_s)
    nodes_users = get_nodes_users(nodeset)
    procs = get_nodes_weird_procs(nodeset, excluded_uids, helper_path)
    print_procs(procs, nodes_users, output_format)


if __name__ == '__main__':
    main()
