#!/usr/bin/env python3
# -*- coding: utf-8 -*-
##############################################################################
#  Copyright (C) 2014-2020 EDF SA                                            #
#                                                                            #
#  Author: RÃ©mi Palancher <remi-externe.palancher@edf.fr>                    #
#                                                                            #
#  This file is part of slurm-llnl-misc-plugins.                             #
#                                                                            #
#  This software is governed by the CeCILL-C license under French law and    #
#  abiding by the rules of distribution of free software. You can use,       #
#  modify and/ or redistribute the software under the terms of the CeCILL-C  #
#  license as circulated by CEA, CNRS and INRIA at the following URL         #
#  "http://www.cecill.info".                                                 #
#                                                                            #
#  As a counterpart to the access to the source code and rights to copy,     #
#  modify and redistribute granted by the license, users are provided only   #
#  with a limited warranty and the software's author, the holder of the      #
#  economic rights, and the successive licensors have only limited           #
#  liability.                                                                #
#                                                                            #
#  In this respect, the user's attention is drawn to the risks associated    #
#  with loading, using, modifying and/or developing or reproducing the       #
#  software by the user in light of its specific status of free software,    #
#  that may mean that it is complicated to manipulate, and that also         #
#  therefore means that it is reserved for developers and experienced        #
#  professionals having in-depth computer knowledge. Users are therefore     #
#  encouraged to load and test the software's suitability as regards their   #
#  requirements in conditions enabling the security of their systems and/or  #
#  data to be ensured and, more generally, to use and operate it in the      #
#  same conditions as regards security.                                      #
#                                                                            #
#  The fact that you are presently reading this means that you have had      #
#  knowledge of the CeCILL-C license and that you accept its terms.          #
#                                                                            #
##############################################################################

""" This script generates /etc/slurm/qos.conf configuration file used
    by Lua job submit plugin. The content of the file is based on the QOS
    in place in SlurmDBD database and the output of sacctmgr command. """

import subprocess
import sys
import csv
import argparse

# list of accounts to ignore
EXCLUDED_ACCOUNTS = ['root']
# Separator for QoSes
QOS_SEP = '_'
# Default conf file
QOS_CONF_FILE = "/etc/slurm/qos.conf"

def read_csv_cmd(cmd, fieldnames):
    """ Execute a cmd and extract fieldnames separated by a '|' delimiter"""
    output = None
    try:
        output = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0].decode('utf-8')
    except subprocess.CalledProcessError as exc:
        print("error while executing cmd: %s: %s" % (','.join(cmd), str(exc)))
        sys.exit(1)

    output_lines = output.split('\n')
    output_lines.pop() # remove last empty line

    return csv.DictReader(output_lines, fieldnames=fieldnames, delimiter='|')

def get_qos_accounts(include_user=False):
    """For a dict with all QOS except 'normal' as keys and the list of allowed
       accounts as values."""
    cmd = ['sacctmgr', '--noheader', '--parsable2', 'show', 'associations', 'format="account,user,qos"']

    fieldnames = ['account', 'user', 'qos']
    reader = read_csv_cmd(cmd, fieldnames)

    result = {}

    for row in reader:
        account = row['account']
        if account in EXCLUDED_ACCOUNTS:
            continue  # jump to next line
        # Skip user associations
        if not include_user and row['user']:
            continue
        qos_list = row['qos'].split(',')
        for qos in qos_list:
            if qos not in result:
                result[qos] = [account]
            elif account not in result[qos]:
                result[qos].append(account)

    return result

parser = argparse.ArgumentParser(
    prog='slurm-gen-qos-conf',
    description='Generate Qos config file %s used by job_submit.lua' % QOS_CONF_FILE)
parser.add_argument('-n', '--dry-run', action='store_true', default=False,
                    help="Don't overwrite anything and just show what the script would generate")
parser.add_argument('-o', '--output', action='store', default=QOS_CONF_FILE,
                    help="output file instead of %s" % QOS_CONF_FILE)
parser.add_argument('-a', '--all', action='store_true', default=False,
                    help="by default QoSes which don't contain '%s' are skipped, include them all" % QOS_SEP)
parser.add_argument('-u', '--user', action='store_true', default=False,
                    help="by default QoSes which are associated to users are skipped, include them all")
args = vars(parser.parse_args())

qos_conf_file = args['output']

qos_accounts = get_qos_accounts(args['user'])

# run sacctmgr to get the list of qos
SACCT_CMD = ['sacctmgr', '--noheader', '--parsable2', 'show', 'qos', 'format="Name,MaxWall,MaxCPUs"']
SACCT_FIELDNAMES = ['name', 'walltime', 'max_cpus']
qos_reader = read_csv_cmd(SACCT_CMD, SACCT_FIELDNAMES)

# list of all lines to write in conf file
qos_conf = []

for qos_row in qos_reader:
    if len(qos_row) < 2:
        print('not enough columns in row: %d' % (len(qos_conf)))
        continue

    qos_conf_l = None

    name = qos_row['name']
    wall = qos_row['walltime']
    cpu = qos_row['max_cpus']

    if not name or name == '':
        print("Skipping QoS because it has no name (%s)" %
              ', '.join(["%s: %s" % (k, v) for k, v in qos_row.items()]))
        continue
    if not wall and not cpu:
        print("Skipping QoS '%s' since MaxWall and MaxCPUs are missing" % name)
        continue
    if not args['all'] and QOS_SEP not in name:
        print("Skipping QoS '%s' because it is not separated by '%s'" %
              (name, QOS_SEP))
        continue

    accounts = ''
    if name in qos_accounts:
        accounts = ','.join(qos_accounts[name])
    qos_conf_l = '|'.join([name, wall, cpu, accounts])

    if qos_conf_l:
        qos_conf.append(qos_conf_l)

if qos_conf:
    qos_conf = sorted(qos_conf, key=lambda k: k[:k.index('|')])
    if not args['dry_run']:
        with open(qos_conf_file, 'w') as qosfile:
            qosfile.writelines('\n'.join(qos_conf))
            qosfile.write('\n')
    else:
        print('\n%s configuration file would contain:\n%s' % (qos_conf_file,
              '\n'.join(qos_conf)))
else:
    # no valid qos line found in output of sacctmgr cmd
    if not args['dry_run']:
        print("QoS conf is empty, did not write %s" % (qos_conf_file))
    else:
        print("\nQoS conf is empty, nothing to write (dry run mode)")
