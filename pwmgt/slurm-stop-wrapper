#!/usr/bin/env python
# -*- coding: utf-8 -*-
##############################################################################
# Copyright (C) 2016 EDF SA                                                  #
#                                                                            #
# Author: RÃ©mi Palancher <remi-externe.palancher@edf.fr>                     #
#                                                                            #
# This file is part of slurm-llnl-misc-plugins.                              #
#                                                                            #
# This software is governed by the CeCILL-C license under French law and     #
# abiding by the rules of distribution of free software. You can use,        #
# modify and/ or redistribute the software under the terms of the CeCILL-C   #
# license as circulated by CEA, CNRS and INRIA at the following URL          #
# "http://www.cecill.info".                                                  #
#                                                                            #
# As a counterpart to the access to the source code and rights to copy,      #
# modify and redistribute granted by the license, users are provided only    #
# with a limited warranty and the software's author, the holder of the       #
# economic rights, and the successive licensors have only limited            #
# liability.                                                                 #
#                                                                            #
# In this respect, the user's attention is drawn to the risks associated     #
# with loading, using, modifying and/or developing or reproducing the        #
# software by the user in light of its specific status of free software,     #
# that may mean that it is complicated to manipulate, and that also          #
# therefore means that it is reserved for developers and experienced         #
# professionals having in-depth computer knowledge. Users are therefore      #
# encouraged to load and test the software's suitability as regards their    #
# requirements in conditions enabling the security of their systems and/or   #
# data to be ensured and, more generally, to use and operate it in the       #
# same conditions as regards security.                                       #
#                                                                            #
# The fact that you are presently reading this means that you have had       #
# knowledge of the CeCILL-C license and that you accept its terms.           #
#                                                                            #
##############################################################################

import os
import sys
import subprocess
import logging
import logging.handlers
import ConfigParser
from StringIO import StringIO
import daemon

logger = None

class AppConf():
    """Runtime configuration class."""

    def __init__(self):

        self.conf_file = '/etc/slurm-llnl/pwmgt/stop-wrapper.conf'
        self.cmd_suspend = None
        self.cmd_poweroff = None

    def dump(self):
        logger.debug("runtime configuration dump:")
        logger.debug("- cmd_suspend: %s", str(self.cmd_suspend))
        logger.debug("- cmd_poweroff: %s", str(self.cmd_poweroff))


conf = AppConf()  # global runtime configuration object

def parse_conf():

    global conf

    """Parse configuration file and set runtime configuration accordingly.
       Here are defined default configuration file parameters."""
    defaults = StringIO(
      "[cmd]\n"
      "suspend=/usr/sbin/pm-suspend\n"
      "poweroff=/sbin/poweroff\n")
    parser = ConfigParser.ConfigParser()
    parser.readfp(defaults)
    parser.read(conf.conf_file)
    conf.cmd_suspend = parser.get('cmd', 'suspend')
    conf.cmd_poweroff = parser.get('cmd', 'poweroff')

def init_logger():
    """Initialize logger with proper format"""

    global logger

    logger = logging.getLogger('slurm-stop-wrapper')
    logger.setLevel(logging.INFO)
    handler = logging.StreamHandler()
    formatter = logging.Formatter('%(name)s: %(levelname)s: %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)

def main():

    init_logger()
    parse_conf()

    orig_cmd = os.environ['SSH_ORIGINAL_COMMAND']

    if orig_cmd == 'poweroff':
        cmd = [ conf.cmd_poweroff ]
        verb = 'powering off'
    elif orig_cmd == 'suspend':
        cmd = [ conf.cmd_suspend ]
        verb = 'suspending'
    else:
        logger.error("unknown original command %s", orig_cmd)
        sys.exit(1)

    with daemon.DaemonContext():
        try:
            subprocess.Popen(cmd)
        except subprocess.CalledProcessError, err:
            logger.error("error while running cmd: %s", str(err))

if __name__ == '__main__':

    main()
