#!/usr/bin/env python3
"""
This script synchronizes users from unix to slurm
"""
# -*- coding: utf-8 -*-
##############################################################################
# Copyright (C) 2015-2020 EDF SA                                             #
#                                                                            #
# Author: RÃ©mi Palancher <remi-externe.palancher@edf.fr>                     #
#                                                                            #
# This file is part of slurm-llnl-misc-plugins.                              #
#                                                                            #
# This software is governed by the CeCILL-C license under French law and     #
# abiding by the rules of distribution of free software. You can use,        #
# modify and/ or redistribute the software under the terms of the CeCILL-C   #
# license as circulated by CEA, CNRS and INRIA at the following URL          #
# "http://www.cecill.info".                                                  #
#                                                                            #
# As a counterpart to the access to the source code and rights to copy,      #
# modify and redistribute granted by the license, users are provided only    #
# with a limited warranty and the software's author, the holder of the       #
# economic rights, and the successive licensors have only limited            #
# liability.                                                                 #
#                                                                            #
# In this respect, the user's attention is drawn to the risks associated     #
# with loading, using, modifying and/or developing or reproducing the        #
# software by the user in light of its specific status of free software,     #
# that may mean that it is complicated to manipulate, and that also          #
# therefore means that it is reserved for developers and experienced         #
# professionals having in-depth computer knowledge. Users are therefore      #
# encouraged to load and test the software's suitability as regards their    #
# requirements in conditions enabling the security of their systems and/or   #
# data to be ensured and, more generally, to use and operate it in the       #
# same conditions as regards security.                                       #
#                                                                            #
# The fact that you are presently reading this means that you have had       #
# knowledge of the CeCILL-C license and that you accept its terms.           #
#                                                                            #
##############################################################################

import os
import sys
import configparser
import grp
import subprocess
import csv

import argparse

import logging
import logging.handlers

# conf global variable
conf = None
logger = None
args = None

DEFAULT_CONF_FILE = '/etc/slurm/sync-accounts.conf'

# This list specifies list of users that should normally be present in SlurmDBD
# but not necessarily in users groups, and therefore should not be removed from
# SlurmDBD.
IGNORED_SLURM_USERS = ['root']

class User():
    """
    User object definition
    """
    def __init__(self, name, group):

        self.name = name
        self.group = group

    def __eq__(self, other):

        return self.name == other.name

    def __hash__(self):

        return hash(self.name)

class Account():
    """
    Account object definition
    """
    def __init__(self, name, desc, groups):

        self.name = name
        self.desc = desc
        self.groups = groups  # the posix groups associated to this account

class Conf():
    """
    Runtime configuration class
    """
    def __init__(self, filename=DEFAULT_CONF_FILE):
        self.filename = filename
        self.org = None
        self.cluster = None
        self.groups = []
        self.policy = None

        # opts creation cmd params
        self.user_add_opts = None
        self.acct_add_opts = None

        # global_account/multiple_accounts policies specific params
        self.accounts = []

    def parse(self):
        """
        Parse the configuration file
        """
        if not os.path.isfile(self.filename):
            die("failed to parse config file {filename}" \
                .format(filename=self.filename))

        parser = configparser.ConfigParser()
        parser.read(self.filename)

        self.cluster = parser.get('main', 'cluster')
        self.org = parser.get('main', 'org')

        self.policy = parser.get('main', 'policy')

        available_policies = ['global_account',
                              'multiple_accounts',
                              'user_account']

        if not self.policy in available_policies:
            die("invalid policy {policy}" \
                .format(policy=self.policy))

        if self.policy in ['global_account', 'user_account']:

            # check deprecated group parameter
            if (not parser.has_option('main', 'groups') and
                    parser.has_option('main', 'group')):
                logger.error('main/group parameter is deprecated, '
                             'use main/groups instead')
                self.groups = [parser.get('main', 'group')]
            else:
                self.groups = parser.get('main', 'groups').split(',')

        if self.policy == 'global_account':
            acct_name = parser.get('global_account', 'name')
            acct_desc = parser.get('global_account', 'desc')
            logger.debug("global account %s for groups %s",
                         acct_name, str(self.groups))
            self.accounts.append(Account(acct_name, acct_desc, self.groups))

        if self.policy == 'multiple_accounts':
            # parse all account/* sections
            prefix = 'account/'
            for section in parser.sections():
                if section.startswith(prefix):
                    acct_name = section[len(prefix):]
                    desc = parser.get(section, 'desc')
                    # check deprecated group parameter
                    if not parser.has_option(section, 'groups') and \
                       parser.has_option(section, 'group'):
                        logger.error("%s/group parameter is deprecated, "
                                     "use %s/groups instead", section, section)
                        groups = [parser.get(section, 'group')]
                    else:
                        groups = parser.get(section, 'groups').split(',')

                    logger.debug("account %s for groups %s",
                                 acct_name, str(groups))
                    self.accounts.append(Account(acct_name, desc, groups))

        try:
            user_opts = parser.get('main', 'user_add_opts')
            if user_opts != '':
                self.user_add_opts = user_opts.split(' ')
            logger.debug("user_add_opts: %s", str(self.user_add_opts))
        except configparser.NoOptionError:
            # This option is not required in configuration file, then
            # self.user_add_opts stays None if not found.
            pass

        try:
            acct_opts = parser.get('main', 'acct_add_opts')
            if acct_opts != '':
                self.acct_add_opts = acct_opts.split(' ')
            logger.debug("acct_add_opts: %s", str(self.acct_add_opts))
        except configparser.NoOptionError:
            # This option is not required in configuration file, then
            # self.acct_add_opts stays None if not found.
            pass

def die(msg):
    """
    Logs a critical error message and dies
    """
    logger.critical(msg)
    sys.exit(1)

def run_or_die(cmd):
    """
    Run a command. If it returns an error and we're not in dry mode, die
    """
    logger.debug("run: %s", ' '.join(cmd))
    if args.dry_run is False:
        returncode = subprocess.call(cmd)
        if returncode:
            die("error while running command: {cmd}: {error}" \
                .format(cmd=' '.join(cmd), error=str(returncode)))

def get_posix_group_users(group):
    """
    Given a group, returns users beins members of this group as a list of
    User()s
    """
    logger.debug("searching for users in group %s", group)
    entry = grp.getgrnam(group)
    return [User(user.lower(), group) for user in entry[3]]

def get_posix_groups_users(groups):
    """
    Given a list of groups, returns users being members of these groups as a
    list of User()s
    """
    users = []

    for group in groups:
        users.extend(get_posix_group_users(group))

    return list(set(users))  # remove duplicates

def get_posix_users():
    """
    Return a dict of users who are members of the posix groups set in
    configuration.
    """
    res = {}
    if conf.groups:
        for user in get_posix_groups_users(conf.groups):
            if user.name not in res:
                res[user.name] = []
            res[user.name].append(user)
        return res

    # merge users of all groups found in conf.accounts
    for account in conf.accounts:
        for user in get_posix_groups_users(account.groups):
            if user.name not in res:
                res[user.name] = []
            res[user.name].append(user)
    return res

def find_group_account(group):
    """
    Return the account name corresponding to the group in parameter.
    """
    for account in conf.accounts:
        if group in account.groups:
            return account.name
    raise IndexError("no account found for group %s" % (group))

def check_acct(name):
    """
    Check if an account exists in slurm
    Returns True if it does
    """
    cmd = ['sacctmgr', '-n', 'show', 'Account', name]
    logger.debug("run: %s", ' '.join(cmd))
    output = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]
    return len(output) > 0

def create_acct(name, desc):
    """
    Create slurm account
    """
    logger.info("creating account %s", name)
    cmd = ['sacctmgr', '-i', 'add', 'account', name,
           "Cluster='{cluster}'".format(cluster=conf.cluster),
           "Description='{desc}'".format(desc=desc),
           "Organization='{org}'".format(org=conf.org)]
    if conf.acct_add_opts is not None:
        cmd.extend(conf.acct_add_opts)
    run_or_die(cmd)

def ensure_acct(name, desc):
    """
    Create slurm account if it doesn't already exist
    """
    if check_acct(name) is False:
        create_acct(name, desc)

def remove_acct(name):
    """
    Remove slurm account
    """
    logger.info("deleting account %s", name)
    cmd = ['sacctmgr', '-i', 'delete', 'account', name]
    run_or_die(cmd)

def create_user(name, account):
    """
    Create slurm user
    """
    logger.info("creating user %s with account %s", name, account)
    cmd = ['sacctmgr', '-i', 'add', 'user', name,
           'DefaultAccount=%s' % account]
    if conf.user_add_opts is not None:
        cmd.extend(conf.user_add_opts)
    run_or_die(cmd)

def remove_user(name):
    """
    Remove slurm user
    """
    logger.info("deleting user %s", name)
    cmd = ['sacctmgr', '-i', 'delete', 'user', name]
    run_or_die(cmd)

def remove_user_account(name, account):
    """
    Remove slurm user using a specific account
    """
    logger.info("deleting user %s with account %s", name, account)
    cmd = ['sacctmgr', '-i', 'delete', 'user', name, 'where',
           'account=%s' % account]
    run_or_die(cmd)

def get_slurm_users():
    """
    Returns a dict for users existing in slurm
    """
    users = {}
    associations = {}
    cmd = ['sacctmgr', 'show', 'association', '--parsable', '--noheader']
    logger.debug("run: %s", ' '.join(cmd))
    output = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0].decode('utf-8')
    reader = csv.reader(output.strip().split('\n'), delimiter='|')

    for row in reader:
        account = row[1]
        user = row[2]
        if not user or not account:
            continue
        if user not in associations:
            associations[user] = []
        associations[user].append(account)

    cmd = ['sacctmgr', 'show', 'user', '--parsable', '--noheader']
    logger.debug("run: %s", ' '.join(cmd))
    output = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0].decode('utf-8')
    reader = csv.reader(output.strip().split('\n'), delimiter='|')

    for row in reader:
        user = row[0]
        if user in IGNORED_SLURM_USERS:
            continue
        users[user] = list(associations[user])

    return users

def parse_args():
    """
    Parse command line arguments
    """
    global args
    parser = argparse.ArgumentParser()
    parser.add_argument("--dry-run", help="Do nothing, just print what it would do.",
                        action="store_true")
    parser.add_argument("--debug", help="Debug mode.", action="store_true")
    args = parser.parse_args()

def init_logger():
    """
    Init the logger
    """
    global logger
    logger = logging.getLogger(__file__)
    if args.debug is True:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)

    if args.debug is True or args.dry_run is True:
        handler = logging.StreamHandler()
        formatter = logging.Formatter('%(levelname)s: %(message)s')
    else:
        handler = logging.handlers.SysLogHandler(address='/dev/log')
        formatter = logging.Formatter('%(name)s - %(levelname)s - %(message)s')

    handler.setFormatter(formatter)
    logger.addHandler(handler)

def main():
    """
    The real main
    """
    global conf

    parse_args()
    init_logger()

    conf = Conf()
    conf.parse()

    if conf.policy != 'user_account':
        for account in conf.accounts:
            ensure_acct(account.name, account.desc)

    users_posix = get_posix_users()
    users_slurm = get_slurm_users()

    slurm_user_names = users_slurm.keys()
    for name, users in users_posix.items():
        for user in users:
            if name in slurm_user_names:
                continue

            # create user and eventually account
            if conf.policy == 'user_account':
                create_acct(user.name, 'user %s default account' % name)
                acct = name
            elif conf.policy in ['global_account', 'multiple_accounts']:
                acct = find_group_account(user.group)
            create_user(name, acct)

    posix_user_names = users_posix.keys()
    for name, accounts in users_slurm.items():
        # While a user might have multiple associations (as in different accounts),
        # if it doesn't exist in Unix, we can delete it in one go
        if name not in posix_user_names:
            remove_user(name)
            if conf.policy == 'user_account':
                remove_acct(name)
            continue

        # The slurm user exists in unix, check if its accounts are correct
        if conf.policy == 'user_account':
            found_accounts = [name]
        elif conf.policy in ['global_account', 'multiple_accounts']:
            found_accounts = []
            for user in users_posix[name]:
                found_accounts.append(find_group_account(user.group))
            found_accounts = sorted(found_accounts)

        # We can't modify a user's association, the only way is to create a new
        # user and to delete the old one. The man page says:
        #
        # ===8<===8<===8<===8<===8<===8<===8<===8<===8<===8<===8<===8<===8<===
        # association
        # Add, modify, and delete should be done to a user, account or cluster
        # entity.  This will in-turn update the underlying associations.
        # ===8<===8<===8<===8<===8<===8<===8<===8<===8<===8<===8<===8<===8<===
        for account in found_accounts:
            if account not in accounts:
                create_user(name, account)

        # This gives us a list of extra slurm accounts the user shouldn't have
        extra_accounts = list(set(accounts).difference(found_accounts))

        for account in extra_accounts:
            remove_user_account(name, account)

if __name__ == '__main__':

    main()
